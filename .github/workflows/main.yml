#This is a basic workflow to help you get started with Actions

name: create-infra-glue

# Controls when the workflow will run
'on':
  # Triggers the workflow on push or pull request events but only for the "main" branch
  repository_dispatch:
    types:
      - trigger-code

    paths:
      - infra/**
      - get-variables-infra/**
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    null
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
  issues: write

env:
  TF_LOG: INFO
  TOKEN_GITHUB: ${{secrets.TOKEN_GITHUB}}
  AWS_REGION: ${{ vars.AWS_REGION }}
  BUCKET_NAME: ${{ vars.BUCKET_NAME }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}
  DYNAMODB_TABLE: ${{ vars.DYNAMODB_TABLE }}
  DYNAMO_TABLE_PROCESS: ${{ vars.DYNAMO_TABLE_PROCESS }}
  BUCKET_NAME_PROCESS: ${{ vars.BUCKET_NAME_PROCESS }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Terraform-Plan:
    environment: prod
    name: Terrafom Plan
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.approval.outputs.approved }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11.10

      - name: Install Python requests
        run: |
          pip install boto3
          pip install pytz

      - name: get-variables-infra
        id: get-variable-infra
        run: |
          ls -la
          cd get-variables-infra
          python get-variables-infra.py

      - name: move-file-variables-infra
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        run: |
          cd get-variables-infra
          mv config-infra.tfvars ../infra/

      #steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Determine .tfvars file and assign environment
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: tfvars
        run: |
          cd infra/var-environment
          echo -e "$(cat ${{env.ENVIRONMENT}}.tfvars)\n" >> ../config-infra.tfvars

      - name: Determine .tfvars file and assign environment
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: tfvars-config
        run: |
          echo "TFVARS_FILE=config-infra.tfvars" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        working-directory: infra

      - name: Determinate var backend file
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: var-backend
        run: |
          cat <<EOF >  "generated_backend_${{env.ENVIRONMENT}}.tfvars"
          bucket         = "${{env.BUCKET_NAME}}-${{env.ENVIRONMENT}}-tfstate"
          key            = "${{env.BUCKET_NAME}}-${{env.ENVIRONMENT}}.tfstate"
          region         = "${{env.AWS_REGION}}"
          dynamodb_table = "${{env.DYNAMODB_TABLE}}-${{env.ENVIRONMENT}}-tflock"
          EOF
        working-directory: infra

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.5

      - name: Terraform Init
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: init
        run: terraform init
          -backend-config=generated_backend_${{env.ENVIRONMENT}}.tfvars
        working-directory: infra

      - name: Terraform Validate
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: validate
        run: terraform validate -no-color
        working-directory: infra

      - name: Terraform Plan
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        id: plan
        run: terraform plan -var-file=${{ env.TFVARS_FILE }} -out=tfplan -no-color
        working-directory: infra
        continue-on-error: true

      - name: Upload tfplan
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./infra/tfplan

      - name: Download tfplan
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./infra

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.5

      - name: Terraform Apply
        if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
        run: |
          ls -l
          terraform apply -auto-approve tfplan
        working-directory: infra
      # - name: Terraform Plan
      #   if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
      #   id: plan
      #   run: terraform plan -out=tfplan -no-color
      #   working-directory: infra
      #   continue-on-error: true

      # - name: Upload tfplan
      #   if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tfplan
      #     path: ./infra/tfplan

      # - name: Approval-Action
      #   if: ${{ steps.get-variable-infra.outputs.status != 'empty' }}
      #   id: approval
      #   uses: ekeel/approval-action@v1.0.3
      #   with:
      #     token: ${{ secrets.GH_PAT }}
      #     approvers: 'pulidovpe, S2rg34-n5b'
      #     minimumApprovals: '1'
      #     issueLabels: 'ManualApproval,ApprovalAction'
      #     excludeInitiator: 'false'
      #     approveWords: 'approve, approved, aprobado'
      #     rejectWords: 'deny, denied, reject, rejected, rechazado'
      #     waitInterval: '1'
      #     waitTimeout: '3'
      #     issueTitle: 'Deployment request approval'
      #     issueBody: |
      #       ###Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       ###Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      #       <details><summary>Validation Output</summary>

      #       \`\`\`
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       ###Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`
      #       ${{ steps.plan.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })